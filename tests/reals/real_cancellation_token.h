// Copyright (c) Microsoft. All rights reserved.

#ifndef REAL_CANCELLATION_TOKEN_H
#define REAL_CANCELLATION_TOKEN_H

#include "macro_utils/macro_utils.h"

#include "c_pal/thandle.h"
#include "c_util/tcall_dispatcher.h"

#include "c_util/cancellation_token.h"

#define R2(X) REGISTER_GLOBAL_MOCK_HOOK(X, real_##X);

#define REGISTER_CANCELLATION_TOKEN_GLOBAL_MOCK_HOOKS() \
    MU_FOR_EACH_1(R2, \
        cancellation_token_create, \
        cancellation_token_is_canceled, \
        cancellation_token_register_notify, \
        cancellation_token_cancel \
    ) \
    REGISTER_GLOBAL_MOCK_HOOK(THANDLE_MOVE(CANCELLATION_TOKEN), THANDLE_MOVE(real_CANCELLATION_TOKEN)) \
    REGISTER_GLOBAL_MOCK_HOOK(THANDLE_INITIALIZE(CANCELLATION_TOKEN), THANDLE_INITIALIZE(real_CANCELLATION_TOKEN)) \
    REGISTER_GLOBAL_MOCK_HOOK(THANDLE_INITIALIZE_MOVE(CANCELLATION_TOKEN), THANDLE_INITIALIZE_MOVE(real_CANCELLATION_TOKEN)) \
    REGISTER_GLOBAL_MOCK_HOOK(THANDLE_ASSIGN(CANCELLATION_TOKEN), THANDLE_ASSIGN(real_CANCELLATION_TOKEN)) \
    REGISTER_GLOBAL_MOCK_HOOK(THANDLE_MOVE(CANCELLATION_TOKEN_REGISTRATION), THANDLE_MOVE(real_CANCELLATION_TOKEN_REGISTRATION)) \
    REGISTER_GLOBAL_MOCK_HOOK(THANDLE_INITIALIZE(CANCELLATION_TOKEN_REGISTRATION), THANDLE_INITIALIZE(real_CANCELLATION_TOKEN_REGISTRATION)) \
    REGISTER_GLOBAL_MOCK_HOOK(THANDLE_INITIALIZE_MOVE(CANCELLATION_TOKEN_REGISTRATION), THANDLE_INITIALIZE_MOVE(real_CANCELLATION_TOKEN_REGISTRATION)) \
    REGISTER_GLOBAL_MOCK_HOOK(THANDLE_ASSIGN(CANCELLATION_TOKEN_REGISTRATION), THANDLE_ASSIGN(real_CANCELLATION_TOKEN_REGISTRATION)) \

typedef struct CANCELLATION_TOKEN_TAG real_CANCELLATION_TOKEN;
THANDLE_TYPE_DECLARE(real_CANCELLATION_TOKEN);

typedef struct CANCELLATION_TOKEN_REGISTRATION_TAG real_CANCELLATION_TOKEN_REGISTRATION;
THANDLE_TYPE_DECLARE(real_CANCELLATION_TOKEN_REGISTRATION);

THANDLE(CANCELLATION_TOKEN) real_cancellation_token_create(bool canceled);
bool real_cancellation_token_is_canceled(THANDLE(CANCELLATION_TOKEN) cancellation_token);
THANDLE(CANCELLATION_TOKEN_REGISTRATION) real_cancellation_token_register_notify(THANDLE(CANCELLATION_TOKEN) cancellation_token, TCALL_DISPATCHER_TARGET_FUNC_TYPE_NAME(CANCELLATION_TOKEN_CANCEL_CALL) on_cancel, void* context);
int real_cancellation_token_cancel(THANDLE(CANCELLATION_TOKEN) cancellation_token);

#endif // REAL_CANCELLATION_TOKEN_H
